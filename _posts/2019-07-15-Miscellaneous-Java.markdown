---
layout: post
title: "Miscellaneous Java"
date: 2019-07-15 20:00:00
author: Sihyeon Kim
categories: java
---

[목차1](#static-메소드)

# static variables, static method  
## static 변수
한 클래스의 모든 인스턴스가 공유하는 변수를 `static`으로 선언한다.  
`static` 변수 즉 클래스 변수는 클래스 이름 또는 인스턴스의 이름으로 접근 가능하다. 보통 클래스 변수에 접근하는지 인스턴스 변수에 접근하는지 구분하기 위해 클래스 변수에 접근할 때는 클래스 이름을 사용한다.   
`static` 변수는 인스턴스가 생성되기 이전에 별도의 메모리 공간에 할당되어 초기화된다. 따라서 인스턴스를 생성하지 않아도 `static` 변수에 접근할 수 있다. `static` 변수가 초기화되는 시점은 JVM에 의해서 클래스가 메모리 공간에 올라가는 순간이다. `static` 변수는 모든 인스턴스가 공유하므로 생성자를 통해 초기화해서는 안된다.      
변경되지 않는 값은 `final`로 선언해 상수화한다.  
클래스 내부 또는 외부에서 참조의 용도로만 선언된 변수는 `static final`로 선언한다. 이때 `static`과 `final`의 선언 위치는 상관없다.  
그리고 접근 제어자<sup>access specifier</sup>를 이용하는 경우가 많다. 이비 `static`과 더불어 `final`로 선언된 변수는 변경이 불가능하므로 외부에서 접근을 허용한다고 해서 문제가 되지 않는다.  
혹은 외부 접근을 허용해서 상수 값이 프로그램상에서 하나문 존재할 수 있다는 의미로 사용할 수 있다.  

## static 메소드  
클래스의 모든 인스턴스는 `static` 메소드에 접근할 수 있다.  
`static` 메소드는 클래스의 이름 또는 인스턴스의 이름으로 접근할 수 있다.  
인스턴스를 생성하지 않아도 `static` 메소드를 호출할 수 있다.  
메소드가 단순히 외부에 기능만을 제공할 때는 인스턴스의 생성 없이 호출할 수 있도록 `static`으로 선언하는 것이 좋다.  
`static` 메소드는 인스턴스 변수에 접근이 불가능하다.  

---

# 접근 제어자<sup>Access specifier</sup>  

|지시자|클래스 내부|동일 패키지|상속받은 클래스|이외의 영역|
|---|:---:|:---:|:---:|:---:|
|private|o|x|x|x|
|default|o|o|x|x|
|protected|o|o|o|x|
|public|o|o|o|o|
